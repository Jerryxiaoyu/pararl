// Generated by gencpp from file msgs/HomeAndLimitRequest.msg
// DO NOT EDIT!


#ifndef MSGS_MESSAGE_HOMEANDLIMITREQUEST_H
#define MSGS_MESSAGE_HOMEANDLIMITREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs
{
template <class ContainerAllocator>
struct HomeAndLimitRequest_
{
  typedef HomeAndLimitRequest_<ContainerAllocator> Type;

  HomeAndLimitRequest_()
    : home_xyz()
    , home_oreintation()
    , limit_range()  {
      home_xyz.assign(0.0);

      home_oreintation.assign(0.0);

      limit_range.assign(0.0);
  }
  HomeAndLimitRequest_(const ContainerAllocator& _alloc)
    : home_xyz()
    , home_oreintation()
    , limit_range()  {
  (void)_alloc;
      home_xyz.assign(0.0);

      home_oreintation.assign(0.0);

      limit_range.assign(0.0);
  }



   typedef boost::array<double, 3>  _home_xyz_type;
  _home_xyz_type home_xyz;

   typedef boost::array<double, 4>  _home_oreintation_type;
  _home_oreintation_type home_oreintation;

   typedef boost::array<double, 6>  _limit_range_type;
  _limit_range_type limit_range;





  typedef boost::shared_ptr< ::msgs::HomeAndLimitRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs::HomeAndLimitRequest_<ContainerAllocator> const> ConstPtr;

}; // struct HomeAndLimitRequest_

typedef ::msgs::HomeAndLimitRequest_<std::allocator<void> > HomeAndLimitRequest;

typedef boost::shared_ptr< ::msgs::HomeAndLimitRequest > HomeAndLimitRequestPtr;
typedef boost::shared_ptr< ::msgs::HomeAndLimitRequest const> HomeAndLimitRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs::HomeAndLimitRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs::HomeAndLimitRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'msgs': ['/home/hu/ProjectOtter/pararl_2/ROS/src/otter_kinova_grasping/msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::msgs::HomeAndLimitRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::HomeAndLimitRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs::HomeAndLimitRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs::HomeAndLimitRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::HomeAndLimitRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::HomeAndLimitRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs::HomeAndLimitRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3495607945e38c175ee34dd54966e097";
  }

  static const char* value(const ::msgs::HomeAndLimitRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3495607945e38c17ULL;
  static const uint64_t static_value2 = 0x5ee34dd54966e097ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs::HomeAndLimitRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs/HomeAndLimitRequest";
  }

  static const char* value(const ::msgs::HomeAndLimitRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs::HomeAndLimitRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[3] home_xyz\n\
float64[4] home_oreintation\n\
float64[6] limit_range\n\
";
  }

  static const char* value(const ::msgs::HomeAndLimitRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs::HomeAndLimitRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.home_xyz);
      stream.next(m.home_oreintation);
      stream.next(m.limit_range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HomeAndLimitRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs::HomeAndLimitRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs::HomeAndLimitRequest_<ContainerAllocator>& v)
  {
    s << indent << "home_xyz[]" << std::endl;
    for (size_t i = 0; i < v.home_xyz.size(); ++i)
    {
      s << indent << "  home_xyz[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.home_xyz[i]);
    }
    s << indent << "home_oreintation[]" << std::endl;
    for (size_t i = 0; i < v.home_oreintation.size(); ++i)
    {
      s << indent << "  home_oreintation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.home_oreintation[i]);
    }
    s << indent << "limit_range[]" << std::endl;
    for (size_t i = 0; i < v.limit_range.size(); ++i)
    {
      s << indent << "  limit_range[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.limit_range[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_MESSAGE_HOMEANDLIMITREQUEST_H
